@page "/registro"
@inject NavigationManager NavManager
@inject IServicioAutorizacion ServicioAutorizacion
@inject IServicioHash Hashing
@inject ServicioUsuarioActualProvisorio UsuarioActual
@inject AltaPersonaUseCase AltaPersonaUseCase
@rendermode InteractiveServer

<PageTitle>SGE - Registro</PageTitle>

<div class="d-flex justify-content-center">
    <div style="width: 400px;">
        <h3 class="text-center mt-4">Registro de Usuario</h3>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        <EditForm Model="@registroModel" OnValidSubmit="OnSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">DNI</label>
                <InputText class="form-control" @bind-Value="registroModel.Dni" />
                <ValidationMessage For="@(() => registroModel.Dni)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Nombre</label>
                <InputText class="form-control" @bind-Value="registroModel.Nombre" />
                <ValidationMessage For="@(() => registroModel.Nombre)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Apellido</label>
                <InputText class="form-control" @bind-Value="registroModel.Apellido" />
                <ValidationMessage For="@(() => registroModel.Apellido)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Correo Electrónico</label>
                <InputText class="form-control" @bind-Value="registroModel.Email" />
                <ValidationMessage For="@(() => registroModel.Email)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Contraseña</label>
                <InputText type="password" class="form-control" @bind-Value="registroModel.Password" />
                <ValidationMessage For="@(() => registroModel.Password)" />
            </div>

            <button type="submit" class="btn btn-success w-100">Registrarse</button>
        </EditForm>
    </div>
</div>

@code {
    private RegistroModel registroModel = new();
    private string? errorMessage;

    private async Task OnSubmit()
    {
        try
        {
            // Crear la entidad Persona
            var persona = new CentroEventos.Aplicacion.Persona
            {
                DNI = registroModel.Dni,
                Nombre = registroModel.Nombre,
                Apellido = registroModel.Apellido,
                Email = registroModel.Email,
                Contrasena = Hashing.Hashear(registroModel.Password)
            };

            // El idUsuario puede ser 1 para registro público (o ajustar según lógica de permisos)
            await Task.Run(() => AltaPersonaUseCase.Ejecutar(persona, 1));

            // Opcional: establecer usuario actual
            UsuarioActual.EstablecerPersona(persona);

            NavManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private class RegistroModel
    {
        public string Dni { get; set; } = "";
        public string Nombre { get; set; } = "";
        public string Apellido { get; set; } = "";
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
    }
}