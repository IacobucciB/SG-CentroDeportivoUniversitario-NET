@page "/ModificarUsuario"
@inject NavigationManager NavManager
@inject IServicioAutorizacion ServicioAutorizacion
@inject ServicioUsuarioActualProvisorio UsuarioActual
@inject IServicioHash Hashing
@inject ModificarPersonaUseCase ModificarPersonaUseCase
@rendermode InteractiveServer

<PageTitle>SGE - Modificar datos</PageTitle>

@if (usuarioCargado)
{
    <div class="d-flex justify-content-center">
        <div style="width: 400px;">
            <h3 class="text-center mt-4">Modificar datos de la cuenta</h3>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }
            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success">@successMessage</div>
            }

            <EditForm Model="@registroModel" OnValidSubmit="OnSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label class="form-label">DNI</label>
                    <InputText class="form-control" @bind-Value="registroModel.Dni" />
                    <ValidationMessage For="@(() => registroModel.Dni)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Nombre</label>
                    <InputText class="form-control" @bind-Value="registroModel.Nombre" />
                    <ValidationMessage For="@(() => registroModel.Nombre)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Apellido</label>
                    <InputText class="form-control" @bind-Value="registroModel.Apellido" />
                    <ValidationMessage For="@(() => registroModel.Apellido)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Correo Electrónico</label>
                    <InputText class="form-control" @bind-Value="registroModel.Email" />
                    <ValidationMessage For="@(() => registroModel.Email)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Nueva Contraseña</label>
                    <InputText type="password" class="form-control" @bind-Value="registroModel.Password" />
                    <ValidationMessage For="@(() => registroModel.Password)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Confirmar Nueva Contraseña</label>
                    <InputText type="password" class="form-control" @bind-Value="registroModel.ConfirmPassword" />
                    <ValidationMessage For="@(() => registroModel.ConfirmPassword)" />
                </div>

                <button type="submit" class="btn btn-primary w-100">Guardar cambios</button>
            </EditForm>
        </div>
    </div>
}
else
{
    <div class="text-center mt-5">
        <p>Cargando datos del usuario...</p>
    </div>
}

@code {
    private RegistroModel registroModel = new();
    private string? errorMessage;
    private string? successMessage;
    private bool usuarioCargado = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var usuario = UsuarioActual.PersonaLogueada!;
            
            if (usuario == null)
            {
                NavManager.NavigateTo("/login");
                return;
            }

            registroModel.Dni = usuario.DNI;
            registroModel.Nombre = usuario.Nombre;
            registroModel.Apellido = usuario.Apellido;
            registroModel.Email = usuario.Email;
            // Password se deja vacío intencionalmente

            Console.WriteLine("El id del usuario es: ",usuario.Id);
            
            usuarioCargado = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar los datos del usuario: {ex.Message}";
        }
    }

    private async Task OnSubmit()
    {
        try
        {
            var usuarioActual = UsuarioActual.PersonaLogueada;
            
            if (usuarioActual == null)
            {
                NavManager.NavigateTo("/login");
                return;
            }

            if (registroModel.Password != registroModel.ConfirmPassword)
            {
                errorMessage = "Las contraseñas no coinciden";
                return;
            }

            // Actualizar la entidad Persona
            var persona = new CentroEventos.Aplicacion.Persona
            {
                DNI = registroModel.Dni,
                Nombre = registroModel.Nombre,
                Apellido = registroModel.Apellido,
                Email = registroModel.Email,
                Contrasena = Hashing.Hashear(registroModel.Password) // Siempre se hashea la nueva contraseña
            };

            ModificarPersonaUseCase.Ejecutar(persona, usuarioActual.Id);

            // Actualizar usuario en sesión
            UsuarioActual.EstablecerPersona(persona);

            successMessage = "Datos actualizados correctamente";
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al actualizar los datos: {ex.Message}";
            successMessage = null;
        }
    }

    private class RegistroModel
    {
        public string Dni { get; set; } = "";

        public string Nombre { get; set; } = "";

        public string Apellido { get; set; } = "";

        public string Email { get; set; } = "";

        public string Password { get; set; } = "";

        public string ConfirmPassword { get; set; } = "";
    }
}