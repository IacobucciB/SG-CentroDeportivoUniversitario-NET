@page "/Registro"
@page "/ModificarUsuario"
@page "/ModificarUsuario/{IdUsuario:int}"
@page "/admin/usuarios/agregar"
@page "/admin/usuarios/modificar/{IdUsuario:int}"
@inject NavigationManager NavManager
@inject IServicioAutorizacion ServicioAutorizacion
@inject IServicioHash Hashing
@inject ServicioSesion UsuarioActual
@inject AltaPersonaUseCase AltaPersonaUseCase
@inject ModificarPersonaUseCase ModificarPersonaUseCase
@inject ObtenerPersonaPorIdUseCase ObtenerPersonaPorIdUseCase
@rendermode InteractiveServer

<PageTitle>SGE - @GetPageTitle()</PageTitle>

@if (datosListos)
{
    <div class="d-flex justify-content-center">
        <div style="width: 400px;">
            <h3 class="text-center mt-4">@GetPageTitle()</h3>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }
            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success">@successMessage</div>
            }

            <EditForm Model="@registroModel" OnValidSubmit="OnSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label class="form-label">DNI</label>
                    <InputText class="form-control" @bind-Value="registroModel.Dni" />
                    <ValidationMessage For="@(() => registroModel.Dni)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Nombre</label>
                    <InputText class="form-control" @bind-Value="registroModel.Nombre" />
                    <ValidationMessage For="@(() => registroModel.Nombre)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Apellido</label>
                    <InputText class="form-control" @bind-Value="registroModel.Apellido" />
                    <ValidationMessage For="@(() => registroModel.Apellido)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Correo Electrónico</label>
                    <InputText class="form-control" @bind-Value="registroModel.Email" />
                    <ValidationMessage For="@(() => registroModel.Email)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Teléfono</label>
                    <InputText class="form-control" @bind-Value="registroModel.Telefono" />
                    <ValidationMessage For="@(() => registroModel.Telefono)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">@GetPasswordLabel()</label>
                    <InputText type="password" class="form-control" @bind-Value="registroModel.Password" />
                    <ValidationMessage For="@(() => registroModel.Password)" />
                    @if (tipoOperacion == TipoOperacion.ModificarPerfil || tipoOperacion == TipoOperacion.ModificarUsuarioAdmin)
                    {
                        <small class="form-text text-muted">Deja en blanco si no deseas cambiar la contraseña</small>
                    }
                </div>

                @if (MostrarConfirmarPassword())
                {
                    <div class="mb-3">
                        <label class="form-label">Confirmar @GetPasswordLabel()</label>
                        <InputText type="password" class="form-control" @bind-Value="registroModel.ConfirmPassword" />
                        <ValidationMessage For="@(() => registroModel.ConfirmPassword)" />
                    </div>
                }

                @if (MostrarPermisos())
                {
                    <div class="mb-3">
                        <label class="form-label">Permisos</label>
                        <div class="border rounded p-3" style="max-height: 200px; overflow-y: auto;">
                            @foreach (var permiso in Enum.GetValues<Permiso>())
                            {
                                <div class="form-check mb-2">
                                    <input class="form-check-input" 
                                           type="checkbox" 
                                           id="permiso_@permiso" 
                                           @onchange="@((e) => OnPermisoChanged(permiso, (bool)e.Value!))" 
                                           checked="@registroModel.PermisosSeleccionados.Contains(permiso)" />
                                    <label class="form-check-label" for="permiso_@permiso">
                                        @GetPermisoDisplayName(permiso)
                                    </label>
                                </div>
                            }
                        </div>
                        <small class="form-text text-muted">
                            Selecciona los permisos que tendrá el usuario
                        </small>
                    </div>
                }

                <button type="submit" class="btn @GetButtonClass() w-100">@GetButtonText()</button>
            </EditForm>

            @if (MostrarBotonCancelar())
            {
                <button type="button" class="btn btn-secondary w-100 mt-2" @onclick="Cancelar">Cancelar</button>
            }
        </div>
    </div>
}
else
{
    <div class="text-center mt-5">
        <p>@GetLoadingMessage()</p>
    </div>
}

@code {
    [Parameter] public int? IdUsuario { get; set; }

    private RegistroModel registroModel = new();
    private string? errorMessage;
    private string? successMessage;
    private bool datosListos = false;
    private TipoOperacion tipoOperacion;

    private enum TipoOperacion
    {
        Registro,
        ModificarPerfil,
        ModificarUsuarioAdmin,
        AgregarUsuarioAdmin
    }

    protected override async Task OnInitializedAsync()
    {
        await DeterminarTipoOperacion();
        await CargarDatos();
        StateHasChanged(); // Forzar actualización de la UI
    }

    private async Task DeterminarTipoOperacion()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var path = uri.AbsolutePath.ToLower();

        if (path.Contains("/registro"))
        {
            tipoOperacion = TipoOperacion.Registro;
        }
        else if (path.Contains("/admin/usuarios/agregar"))
        {
            tipoOperacion = TipoOperacion.AgregarUsuarioAdmin;
        }
        else if (path.Contains("/admin/usuarios/modificar") && IdUsuario.HasValue)
        {
            tipoOperacion = TipoOperacion.ModificarUsuarioAdmin;
        }
        else if (path.Contains("/modificarusuario"))
        {
            if (IdUsuario.HasValue)
            {
                tipoOperacion = TipoOperacion.ModificarUsuarioAdmin;
            }
            else
            {
                tipoOperacion = TipoOperacion.ModificarPerfil;
            }
        }
        else
        {
            tipoOperacion = TipoOperacion.Registro; // Por defecto
        }
    }

    private async Task CargarDatos()
    {
        try
        {
            // Verificar autenticación según el tipo de operación
            if (RequiereAutenticacion() && UsuarioActual.PersonaLogueada == null)
            {
                NavManager.NavigateTo("/login");
                return;
            }

            // Verificar permisos de administrador si es necesario
            if (RequierePermisos() && !TienePermisosNecesarios())
            {
                NavManager.NavigateTo("/acceso-denegado");
                return;
            }

            switch (tipoOperacion)
            {
                case TipoOperacion.Registro:
                case TipoOperacion.AgregarUsuarioAdmin:
                    // Para registro y agregar usuario, no hay datos que cargar
                    break;

                case TipoOperacion.ModificarPerfil:
                    CargarDatosUsuarioActual();
                    break;

                case TipoOperacion.ModificarUsuarioAdmin:
                    await CargarDatosUsuarioEspecifico();
                    break;
            }

            datosListos = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar los datos: {ex.Message}";
            datosListos = true;
        }
    }

    private void CargarDatosUsuarioActual()
    {
        if (UsuarioActual.PersonaLogueada != null)
        {
            registroModel.Dni = UsuarioActual.PersonaLogueada.DNI;
            registroModel.Nombre = UsuarioActual.PersonaLogueada.Nombre;
            registroModel.Apellido = UsuarioActual.PersonaLogueada.Apellido;
            registroModel.Email = UsuarioActual.PersonaLogueada.Email;
            registroModel.Telefono = UsuarioActual.PersonaLogueada.Telefono ?? "";
            // No cargamos la contraseña por seguridad
            registroModel.Password = "";
            registroModel.ConfirmPassword = "";
        }
    }

    private async Task CargarDatosUsuarioEspecifico()
    {
        if (IdUsuario.HasValue)
        {
            var persona = await Task.Run(() => ObtenerPersonaPorIdUseCase.Ejecutar(IdUsuario.Value));
            if (persona != null)
            {
                registroModel.Dni = persona.DNI;
                registroModel.Nombre = persona.Nombre;
                registroModel.Apellido = persona.Apellido;
                registroModel.Email = persona.Email;
                registroModel.Telefono = persona.Telefono ?? "";
                // No cargamos la contraseña por seguridad
                registroModel.Password = "";
                registroModel.ConfirmPassword = "";
                
                // Cargar permisos del usuario
                await CargarPermisosUsuario(IdUsuario.Value);
            }
            else
            {
                throw new Exception("Usuario no encontrado");
            }
        }
    }

    private async Task CargarPermisosUsuario(int idUsuario)
    {
        // Aquí deberías cargar los permisos del usuario desde tu servicio
        // Ejemplo (adapta según tu implementación):
        /*
        registroModel.PermisosSeleccionados.Clear();
        foreach (var permiso in Enum.GetValues<Permiso>())
        {
            if (ServicioAutorizacion.PoseeElPermiso(idUsuario, permiso))
            {
                registroModel.PermisosSeleccionados.Add(permiso);
            }
        }
        */
        await Task.CompletedTask; // Placeholder para evitar warning de método async sin await
    }

    private void OnPermisoChanged(Permiso permiso, bool isChecked)
    {
        if (isChecked)
        {
            if (!registroModel.PermisosSeleccionados.Contains(permiso))
            {
                registroModel.PermisosSeleccionados.Add(permiso);
            }
        }
        else
        {
            registroModel.PermisosSeleccionados.Remove(permiso);
        }
    }

    private string GetPermisoDisplayName(Permiso permiso)
    {
        return permiso switch
        {
            Permiso.EventoAlta => "Crear Eventos",
            Permiso.EventoModificacion => "Modificar Eventos",
            Permiso.EventoBaja => "Eliminar Eventos",
            Permiso.ReservaAlta => "Crear Reservas",
            Permiso.ReservaModificacion => "Modificar Reservas",
            Permiso.ReservaBaja => "Eliminar Reservas",
            Permiso.UsuarioAlta => "Crear Usuarios",
            Permiso.UsuarioModificacion => "Modificar Usuarios",
            Permiso.UsuarioBaja => "Eliminar Usuarios",
            _ => permiso.ToString()
        };
    }

    private async Task OnSubmit()
    {
        try
        {
            if (MostrarConfirmarPassword() && registroModel.Password != registroModel.ConfirmPassword)
            {
                errorMessage = "Las contraseñas no coinciden";
                return;
            }

            var persona = new CentroEventos.Aplicacion.Persona
            {
                DNI = registroModel.Dni,
                Nombre = registroModel.Nombre,
                Apellido = registroModel.Apellido,
                Email = registroModel.Email,
                Telefono = registroModel.Telefono
            };

            // Solo hashear la contraseña si se proporcionó una nueva
            if (!string.IsNullOrEmpty(registroModel.Password))
            {
                persona.Contrasena = Hashing.Hashear(registroModel.Password);
            }

            switch (tipoOperacion)
            {
                case TipoOperacion.Registro:
                    await ProcesarRegistro(persona);
                    break;

                case TipoOperacion.ModificarPerfil:
                    await ProcesarModificarPerfil(persona);
                    break;

                case TipoOperacion.AgregarUsuarioAdmin:
                    await ProcesarAgregarUsuarioAdmin(persona);
                    break;

                case TipoOperacion.ModificarUsuarioAdmin:
                    await ProcesarModificarUsuarioAdmin(persona);
                    break;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            successMessage = null;
        }
    }

    private async Task ProcesarRegistro(CentroEventos.Aplicacion.Persona persona)
    {
        await Task.Run(() => AltaPersonaUseCase.Ejecutar(persona, 1));
        UsuarioActual.IniciarSesion(persona);
        NavManager.NavigateTo("/");
    }

    private async Task ProcesarModificarPerfil(CentroEventos.Aplicacion.Persona persona)
    {
        if (UsuarioActual.PersonaLogueada == null)
        {
            NavManager.NavigateTo("/login");
            return;
        }

        persona.Id = UsuarioActual.PersonaLogueada.Id;
        
        // Si no se proporcionó nueva contraseña, mantener la actual
        if (string.IsNullOrEmpty(registroModel.Password))
        {
            persona.Contrasena = UsuarioActual.PersonaLogueada.Contrasena;
        }
        
        await Task.Run(() => ModificarPersonaUseCase.Ejecutar(persona, UsuarioActual.PersonaLogueada.Id));
        UsuarioActual.IniciarSesion(persona);
        successMessage = "Datos actualizados correctamente";
        errorMessage = null;
    }

    private async Task ProcesarAgregarUsuarioAdmin(CentroEventos.Aplicacion.Persona persona)
    {
        await Task.Run(() => AltaPersonaUseCase.Ejecutar(persona, UsuarioActual.PersonaLogueada!.Id));
        
        // Asignar permisos seleccionados
        await AsignarPermisosUsuario(persona.Id);
        
        successMessage = "Usuario agregado correctamente";
        errorMessage = null;
        registroModel = new RegistroModel(); // Limpiar formulario
    }

    private async Task ProcesarModificarUsuarioAdmin(CentroEventos.Aplicacion.Persona persona)
    {
        if (!IdUsuario.HasValue)
        {
            throw new Exception("ID de usuario no válido");
        }

        persona.Id = IdUsuario.Value;
        
        // Si no se proporcionó nueva contraseña, obtener la actual del usuario
        if (string.IsNullOrEmpty(registroModel.Password))
        {
            var usuarioExistente = await Task.Run(() => ObtenerPersonaPorIdUseCase.Ejecutar(IdUsuario.Value));
            if (usuarioExistente != null)
            {
                persona.Contrasena = usuarioExistente.Contrasena;
            }
        }
        
        await Task.Run(() => ModificarPersonaUseCase.Ejecutar(persona, UsuarioActual.PersonaLogueada!.Id));
        
        // Actualizar permisos
        await AsignarPermisosUsuario(persona.Id);
        
        successMessage = "Usuario modificado correctamente";
        errorMessage = null;
    }

    private async Task AsignarPermisosUsuario(int idUsuario)
    {
        // Aquí deberías implementar la lógica para asignar/quitar permisos
        // según tu implementación de servicios
        
        // Ejemplo de lo que podrías hacer:
        /*
        // Primero quitar todos los permisos existentes
        foreach (var permiso in Enum.GetValues<Permiso>())
        {
            ServicioAutorizacion.QuitarPermiso(idUsuario, permiso);
        }
        
        // Luego asignar los permisos seleccionados
        foreach (var permiso in registroModel.PermisosSeleccionados)
        {
            ServicioAutorizacion.AsignarPermiso(idUsuario, permiso);
        }
        */
        await Task.CompletedTask; // Placeholder para evitar warning de método async sin await
    }

    private void Cancelar()
    {
        if (tipoOperacion == TipoOperacion.AgregarUsuarioAdmin || tipoOperacion == TipoOperacion.ModificarUsuarioAdmin)
        {
            NavManager.NavigateTo("/admin/usuarios");
        }
        else
        {
            NavManager.NavigateTo("/");
        }
    }

    // Métodos auxiliares para determinar qué mostrar
    private bool RequiereAutenticacion() => tipoOperacion != TipoOperacion.Registro;
    
    private bool RequierePermisos() => tipoOperacion == TipoOperacion.AgregarUsuarioAdmin || tipoOperacion == TipoOperacion.ModificarUsuarioAdmin;
    
    private bool EsAdministrador() => UsuarioActual.PersonaLogueada != null && ServicioAutorizacion.EsAdmin(UsuarioActual.PersonaLogueada.Id);
    
    private bool TienePermisosNecesarios()
    {
        if (UsuarioActual.PersonaLogueada == null) return false;
        
        return tipoOperacion switch
        {
            TipoOperacion.AgregarUsuarioAdmin => ServicioAutorizacion.PoseeElPermiso(UsuarioActual.PersonaLogueada.Id, Permiso.UsuarioAlta),
            TipoOperacion.ModificarUsuarioAdmin => ServicioAutorizacion.PoseeElPermiso(UsuarioActual.PersonaLogueada.Id, Permiso.UsuarioModificacion),
            _ => true
        };
    }
    
    private bool MostrarPermisos() => tipoOperacion == TipoOperacion.AgregarUsuarioAdmin || tipoOperacion == TipoOperacion.ModificarUsuarioAdmin;
    
    private bool MostrarBotonCancelar() => tipoOperacion == TipoOperacion.AgregarUsuarioAdmin || tipoOperacion == TipoOperacion.ModificarUsuarioAdmin;

    private bool MostrarConfirmarPassword() => tipoOperacion == TipoOperacion.Registro || tipoOperacion == TipoOperacion.AgregarUsuarioAdmin;

    private string GetPageTitle()
    {
        return tipoOperacion switch
        {
            TipoOperacion.Registro => "Registro de Usuario",
            TipoOperacion.ModificarPerfil => "Modificar datos de la cuenta",
            TipoOperacion.AgregarUsuarioAdmin => "Agregar Usuario",
            TipoOperacion.ModificarUsuarioAdmin => "Modificar Usuario",
            _ => "Gestión de Usuario"
        };
    }

    private string GetPasswordLabel()
    {
        return tipoOperacion switch
        {
            TipoOperacion.Registro or TipoOperacion.AgregarUsuarioAdmin => "Contraseña",
            _ => "Nueva Contraseña"
        };
    }

    private string GetButtonText()
    {
        return tipoOperacion switch
        {
            TipoOperacion.Registro => "Registrarse",
            TipoOperacion.ModificarPerfil => "Guardar cambios",
            TipoOperacion.AgregarUsuarioAdmin => "Agregar Usuario",
            TipoOperacion.ModificarUsuarioAdmin => "Modificar Usuario",
            _ => "Guardar"
        };
    }

    private string GetButtonClass()
    {
        return tipoOperacion switch
        {
            TipoOperacion.Registro => "btn-success",
            _ => "btn-primary"
        };
    }

    private string GetLoadingMessage()
    {
        return tipoOperacion switch
        {
            TipoOperacion.Registro or TipoOperacion.AgregarUsuarioAdmin => "Preparando formulario...",
            _ => "Cargando datos del usuario..."
        };
    }

    private class RegistroModel
    {
        public string Dni { get; set; } = "";
        public string Nombre { get; set; } = "";
        public string Apellido { get; set; } = "";
        public string Email { get; set; } = "";
        public string Telefono { get; set; } = "";
        public string Password { get; set; } = "";
        public string ConfirmPassword { get; set; } = "";
        public HashSet<Permiso> PermisosSeleccionados { get; set; } = new();
    }
}